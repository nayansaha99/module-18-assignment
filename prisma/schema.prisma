// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model brands {
  id        BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  brandName String     @db.VarChar(50)
  brandImg  String     @db.VarChar(300)
  createdAt DateTime   @default(now()) @db.Timestamp(0) ///(now()) means - jokhn create hobe automatic creating timestamp ta dhuke jabe /// Timestamp(0)- 0 means most nearest timestamp that mean jokhn data ta create hoile thik oi somoy ar timestamp ta
  updatedAt DateTime   @default(now()) @updatedAt @db.Timestamp(0) //(now()) meaning same and Timestamp(0) - 0 meaning same //@updatedAt - ei model ta diye jokhn kono data update korbo automatically prisma change kore dibe amader eka eka code ar modhe change korte hobe na...
  products  products[]
}

model categories {
  id           BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  categoryName String     @db.VarChar(50)
  categoryImg  String     @db.VarChar(300)
  createdAt    DateTime   @default(now()) @db.Timestamp(0)
  updatedAt    DateTime   @default(now()) @updatedAt @db.Timestamp(0)
  products     products[]
}

model products {
  id             BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  title          String          @db.VarChar(200)
  short_des      String?         @db.VarChar(200) //string? - ? sign means nullable
  price          String          @db.VarChar(50)
  discount       Boolean
  discount_price String          @db.VarChar(50)
  image          String          @db.VarChar(200)
  stock          Boolean
  star           Float
  remark         products_remark
  category_id    BigInt          @db.UnsignedBigInt
  brand_id       BigInt          @db.UnsignedBigInt
  createdAt      DateTime        @default(now()) @db.Timestamp(0)
  updatedAt      DateTime        @default(now()) @db.Timestamp(0)
  brands         brands          @relation(fields: [brand_id], references: [id], onDelete: Restrict, onUpdate: Cascade) //onUpdate: cascade means brand table id jodi kono karone update hoye tahle foreign key brand_id o update hoye jabe //onDelete:restrict means kono karone jodi brand table id delete korte chai tahle tar age relational brand_id delete hoite hobe///

  categories categories @relation(fields: [category_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  product_details  products_details?
  product_sliders  product_sliders?
  product_wishes   product_wishes[]
  product_carts    product_carts[]
  product_reviews  product_reviews[]
  invoice_products invoice_products[]
}

enum products_remark {
  populer
  new
  top
  special
  trending
  reguler
}

model products_details {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  img1       String   @db.VarChar(200)
  img2       String   @db.VarChar(200)
  img3       String   @db.VarChar(200)
  img4       String   @db.VarChar(200)
  des        String   @db.LongText
  color      String   @db.VarChar(200)
  size       String   @db.VarChar(200)
  product_id BigInt   @unique() @db.UnsignedBigInt
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @default(now()) @db.Timestamp(0)
  products   products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model product_sliders {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  title      String   @db.VarChar(200)
  short_des  String   @db.VarChar(500)
  price      String   @db.VarChar(100)
  image      String   @db.VarChar(200)
  product_id BigInt   @unique() @db.UnsignedBigInt
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamp(0)
  products   products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model users {
  id                BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  email             String             @unique() @db.VarChar(50)
  otp               String             @db.VarChar(10)
  createdAt         DateTime           @default(now()) @db.Timestamp(0)
  updatedAt         DateTime           @default(now()) @updatedAt @db.Timestamp(0)
  customer_profiles customer_profiles?
  product_wishes    product_wishes[]
  product_carts     product_carts[]
  invoices          invoices[]
  invoice_products  invoice_products[]
}

model customer_profiles {
  id            BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  cus_name      String   @db.VarChar(100)
  cus_add       String   @db.VarChar(500)
  cus_city      String   @db.VarChar(50)
  cus_state     String   @db.VarChar(50)
  cus_postcode  String   @db.VarChar(50)
  cus_country   String   @db.VarChar(50)
  cus_phone     String   @db.VarChar(50)
  cus_fax       String   @db.VarChar(50)
  ship_name     String   @db.VarChar(100)
  ship_add      String   @db.VarChar(100)
  ship_city     String   @db.VarChar(100)
  ship_state    String   @db.VarChar(100)
  ship_postcode String   @db.VarChar(100)
  ship_country  String   @db.VarChar(100)
  ship_phone    String   @db.VarChar(100)
  user_id       BigInt   @unique @db.UnsignedBigInt
  createdAt     DateTime @default(now()) @db.Timestamp(0)
  updatedAt     DateTime @default(now()) @updatedAt @db.Timestamp(0)

  users           users             @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  product_reviews product_reviews[]
}

model product_wishes {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  product_id BigInt   @db.UnsignedBigInt
  user_id    BigInt   @db.UnsignedBigInt
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamp(0)
  products   products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model product_carts {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt   @db.UnsignedBigInt
  product_id BigInt   @db.UnsignedBigInt
  color      String   @db.VarChar(200)
  size       String   @db.VarChar(200)
  qty        String   @db.VarChar(200)
  price      String   @db.VarChar(200)
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamp(0)
  products   products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model product_reviews {
  id                BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  description       String            @db.VarChar(1000)
  rating            String            @db.VarChar(10)
  customer_id       BigInt            @db.UnsignedBigInt
  product_id        BigInt            @db.UnsignedBigInt
  createdAt         DateTime          @default(now()) @db.Timestamp(0)
  updatedAt         DateTime          @default(now()) @updatedAt @db.Timestamp(0)
  customer_profiles customer_profiles @relation(fields: [customer_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  products          products          @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model sslcommerz_accounts {
  id           BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  store_id     String   @db.VarChar(255)
  store_passwd String   @db.VarChar(255)
  currency     String   @db.VarChar(255)
  success_url  String   @db.VarChar(255)
  fail_url     String   @db.VarChar(255)
  cancel_url   String   @db.VarChar(255)
  ipn_url      String   @db.VarChar(255)
  init_url     String   @db.VarChar(255)
  createdAt    DateTime @default(now()) @db.Timestamp(0)
  updatedAt    DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model policies {
  id        BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  type      policies_type
  des       String        @db.LongText
  createdAt DateTime      @default(now()) @db.Timestamp(0)
  updatedAt DateTime      @default(now()) @updatedAt @db.Timestamp(0)
}

enum policies_type {
  about
  refund
  terms
  how_to_buy
  contact
  complain
}

model invoices {
  id               BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  total            String                   @db.VarChar(50)
  vat              String                   @db.VarChar(50)
  payable          String                   @db.VarChar(50)
  cus_details      String                   @db.VarChar(500)
  ship_details     String                   @db.VarChar(500)
  tran_id          String                   @db.VarChar(100)
  val_id           String                   @default("0") @db.VarChar(100)
  delivery_status  invoices_delivery_status
  payment_status   String                   @db.VarChar(255)
  user_id          BigInt                   @db.UnsignedBigInt
  created_at       DateTime                 @default(now()) @db.Timestamp(0)
  updated_at       DateTime                 @default(now()) @db.Timestamp(0)
  invoice_products invoice_products[]
  users            users                    @relation(fields: [user_id], references: [id], map: "invoices_user_id_foreign")

  @@index([user_id], map: "invoices_user_id_foreign")
}

enum invoices_delivery_status {
  Pending
  Processing
  Completed
}

model invoice_products {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  invoice_id BigInt   @db.UnsignedBigInt
  product_id BigInt   @db.UnsignedBigInt
  user_id    BigInt   @db.UnsignedBigInt
  qty        String   @db.VarChar(50)
  sale_price String   @db.VarChar(50)
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
  invoices   invoices @relation(fields: [invoice_id], references: [id], map: "invoice_products_invoice_id_foreign")
  products   products @relation(fields: [product_id], references: [id], map: "invoice_products_product_id_foreign")
  users      users    @relation(fields: [user_id], references: [id], map: "invoice_products_user_id_foreign")
}
